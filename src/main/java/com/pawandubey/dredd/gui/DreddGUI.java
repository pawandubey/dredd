/*we
 * Copyright 2015 Pawan Dubey pawandubey@outlook.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pawandubey.dredd.gui;

import com.pawandubey.dredd.model.ConnectionProvider;
import com.pawandubey.dredd.model.Judge;
import com.pawandubey.dredd.model.Judgement;
import com.pawandubey.dredd.model.language.CLanguage;
import com.pawandubey.dredd.model.language.CPPLanguage;
import com.pawandubey.dredd.model.language.JavaLanguage;
import com.pawandubey.dredd.model.language.Language;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Pawan Dubey pawandubey@outlook.com
 */
public class DreddGUI extends javax.swing.JFrame {
    
    private static final String DB_PASSWORD = "root";
    private static final String DB_USERNAME = "root";
    private static final String DBMS = "mysql";
    private static final String DB_SERVER = "localhost";
    private static final String DB_PORT = "3306";
    private static final String DB_NAME = "dredd";
    private static Connection con;
    private static String username;
    private TableModel model;
    private File file;
    private static String userid;
    
    static boolean authenticate(String username, String password) {
        try {
            Statement st = con.createStatement();
            String query = "Select userid, password from users where name = '" + username + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                if (rs.getString("password").equals(password)) {
                    userid = rs.getString("userid");
                    return true;
                }
            }
        }
        catch (SQLException e) {
        }
        return false;
    }

    /**
     * Creates new form DreddGUI
     */
    public DreddGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * k * WARNING: Do NOT modify this code. The content of this method is
     * always * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        activeScreenLabel = new javax.swing.JLabel();
        homeProfileButton = new javax.swing.JToggleButton();
        logoutButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();
        questionNameLabel = new javax.swing.JLabel();
        submissionStatsLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox();
        submitButton = new javax.swing.JButton();
        chooseFileButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        questionsList = new javax.swing.JList();
        profilePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        submissionsTable = new javax.swing.JTable();
        submissionsLabel = new javax.swing.JLabel();
        totalSubmissionsLabel = new javax.swing.JLabel();
        correctSubmissionsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dredd");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Questrial", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(204, 204, 204));
        titleLabel.setText("dredd");

        activeScreenLabel.setFont(new java.awt.Font("Questrial", 1, 24)); // NOI18N
        activeScreenLabel.setForeground(new java.awt.Color(255, 255, 255));
        activeScreenLabel.setText("HOME");

        homeProfileButton.setText("Login");
        homeProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeProfileButtonActionPerformed(evt);
            }
        });

        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activeScreenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeProfileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeScreenLabel)
                    .addComponent(titleLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(homeProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contentPanel.setLayout(new javax.swing.OverlayLayout(contentPanel));

        questionTextArea.setColumns(20);
        questionTextArea.setRows(5);
        jScrollPane2.setViewportView(questionTextArea);

        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Java", "C++", "C" }));

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        chooseFileButton.setText("Choose File");
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });

        questionsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(questionsList);

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(questionNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(submissionStatsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(questionNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submissionStatsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseFileButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)))
                .addContainerGap())
        );

        contentPanel.add(homePanel);

        submissionsTable.setModel(new DefaultTableModel());
        scrollPane.setViewportView(submissionsTable);

        submissionsLabel.setFont(new java.awt.Font("Questrial", 0, 24)); // NOI18N
        submissionsLabel.setText("Submissions");

        totalSubmissionsLabel.setText("Total");

        correctSubmissionsLabel.setText("Correct");

        javax.swing.GroupLayout profilePanelLayout = new javax.swing.GroupLayout(profilePanel);
        profilePanel.setLayout(profilePanelLayout);
        profilePanelLayout.setHorizontalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(profilePanelLayout.createSequentialGroup()
                        .addComponent(submissionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalSubmissionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(correctSubmissionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE))
                .addContainerGap())
        );
        profilePanelLayout.setVerticalGroup(
            profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submissionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(profilePanelLayout.createSequentialGroup()
                        .addComponent(totalSubmissionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(correctSubmissionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        contentPanel.add(profilePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            if (file != null) {
                chooseFileButton.setText(file.getName());
            }
        }

    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void homeProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeProfileButtonActionPerformed
        if (homeProfileButton.isSelected()) {
            if (homeProfileButton.getText().equals("Login")) {
                doLogin();
                homeProfileButton.setSelected(false);
            }
            else {
                this.homePanel.setVisible(false);
                this.profilePanel.setVisible(true);
                populateProfileData();
                homeProfileButton.setText("Back");
                this.activeScreenLabel.setText("PROFILE");
            }
        }
        else {
            this.homePanel.setVisible(true);
            this.profilePanel.setVisible(false);
            homeProfileButton.setText("Hello, " + username);
            this.activeScreenLabel.setText("HOME");
        }
    }//GEN-LAST:event_homeProfileButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        homeProfileButton.setText("Login");
        homeProfileButton.setSelected(false);
        doLogin();
    }//GEN-LAST:event_formWindowOpened

    private void doLogin() {
        contentPanel.setVisible(false);
        LoginDialog loginDialog = new LoginDialog(this);
        loginDialog.setVisible(true);
        if (loginDialog.isSucceeded()) {
            try {
                username = loginDialog.getUsername();
                this.homeProfileButton.setText("Hello, " + username);
                contentPanel.setVisible(true);
                populateList();
                //populateProfileData();
                this.questionTextArea.setEditable(false);
                this.questionTextArea.setLineWrap(true);
            }
            catch (SQLException ex) {
                Logger.getLogger(DreddGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        homeProfileButton.setText("Login");
        doLogin();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        try {
            String lang = languageComboBox.getSelectedItem().toString();
            Path path = Paths.get(file.getAbsolutePath());
            String qDir = questionsList.getSelectedValue().toString();
            Language language;
            switch (lang) {
                case "Java":
                    language = new JavaLanguage(path, qDir);
                    break;
                case "C++":
                    language = new CPPLanguage(path, qDir);
                    break;
                default:
                    language = new CLanguage(path, qDir);
                    break;
            }
            Statement st = con.createStatement();
            String query = "select questionid from questions where questionname like '" + qDir + "'";
            ResultSet rs = st.executeQuery(query);
            rs.next();
            String qid = rs.getString("questionid");
            String insert = "insert into submissions(questionid, userid, language) values('" + qid + "'," + "'" + userid + "'," + "'" + language.getName() + "')";
            st.executeUpdate(insert);
            query = "select last_insert_id()";
            rs = st.executeQuery(query);
            rs.next();
            String sid = rs.getString(1);
            Judge judge = new Judge(language, qDir, sid, 0);
            String result = judge.evaluate();
            JOptionPane.showMessageDialog(rootPane, "Your submission is " + result, "Result", JOptionPane.INFORMATION_MESSAGE);
            query = "update submissions set judgement = '" + result + "' where submissionid = " + sid;
            st.executeUpdate(query);
            query = "update questions set totalsubmissions = totalsubmissions+1 where questionid = '" + qDir + "'";
            st.executeUpdate(query);
            if (result.equals(Judgement.CORRECT.toString())) {
                query = "update questions set correctsubmissions = correctsubmissions+1 where questionid = '" + qDir + "'";
                st.executeUpdate(query);
                
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(DreddGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void populateList() throws SQLException {
        DefaultListModel model = new DefaultListModel();
        Statement st = con.createStatement();
        String query = "Select questionname from questions";
        ResultSet rs = st.executeQuery(query);
        while (rs.next()) {
            model.addElement(rs.getString("questionname"));
        }
        this.questionsList.setModel(model);
        this.questionsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.questionsList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (questionsList.equals(e.getSource())) {
                    if (e.getClickCount() == 2) {
                        String qName = questionsList.getSelectedValue().toString();
                        displayQuestion(qName);
                    }
                }
            }
            
        });
        this.questionsList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (questionsList.equals(e.getSource())) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        String qName = questionsList.getSelectedValue().toString();
                        displayQuestion(qName);
                    }
                }
            }
        });
    }
    
    public void displayQuestion(String qName) {
        try {
            questionTextArea.setText("");
            Statement st = con.createStatement();
            String query = "select questionpath from questions where questionname like '" + qName + "'";
            ResultSet rs = st.executeQuery(query);
            rs.next();
            String path = rs.getString("questionpath");
            Path file = Paths.get(path);
            StringBuilder question = new StringBuilder();
            try (BufferedReader br = Files.newBufferedReader(file)) {
                String s;
                while ((s = br.readLine()) != null) {
                    question.append(s).append("\n");
                }
            }
            catch (IOException ex) {
                Logger.getLogger(DreddGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            this.questionTextArea.append(question.toString());
            this.questionTextArea.setCaretPosition(0);
        }
        catch (SQLException ex) {
            Logger.getLogger(DreddGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            //javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DreddGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        con = ConnectionProvider.connect(DB_USERNAME, DB_PASSWORD, DBMS, DB_SERVER, DB_PORT, DB_NAME);
//        Language language = new CLanguage(Paths.get("/home/pawandubey/dredd/test.c"), "one");
//
//        Judge judge = new Judge(language, "one", "1234", 0);
//        System.out.println(judge.evaluate());

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DreddGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeScreenLabel;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel correctSubmissionsLabel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JToggleButton homeProfileButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox languageComboBox;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel questionNameLabel;
    private javax.swing.JTextArea questionTextArea;
    private javax.swing.JList questionsList;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel submissionStatsLabel;
    private javax.swing.JLabel submissionsLabel;
    private javax.swing.JTable submissionsTable;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel totalSubmissionsLabel;
    // End of variables declaration//GEN-END:variables

    private void populateProfileData() {
        try {
            Statement st = con.createStatement();
            String query = "select count(submissionid) from submissions natural join users where userid = '" + userid + "' and judgement = 'CORRECT'";
            ResultSet rs = st.executeQuery(query);
            rs.next();
            String correct = rs.getString(1);
            correctSubmissionsLabel.setText("Correct " + correct);
            query = "select submissionid, questionid, language, judgement from submissions natural join users where name = '" + username + "'";
            rs = st.executeQuery(query);
            rs.last();
            int count = rs.getRow();
            totalSubmissionsLabel.setText("Total " + count);
            rs.first();
            rs.previous();
            Object[] col = {"Submission ID", "Question ID", "Language", "Judgement"};
            String[][] data = new String[count][4];
            //columns.addAll(Arrays.asList(col));
            //String[] row = new String[4];
            int index = 0;
            while (rs.next()) {
                for (int i = 1; i < 5; i++) {
                    data[index][i - 1] = rs.getString(i);
                }
                index++;
            }
            
            model = new DefaultTableModel(data, col);
            submissionsTable.setModel(model);
            submissionsTable.setAutoCreateRowSorter(true);
            
        }
        catch (SQLException ex) {
            Logger.getLogger(DreddGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
